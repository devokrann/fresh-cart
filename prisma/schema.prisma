// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name init -> sync database
// npx prisma db push -> sync database

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"] // enables postgresql extensions
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL") // uses connection pooling
  // directUrl = env("NEXT_DIRECT_URL") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model Address {
  title   String
  fname   String
  lname   String
  street  String
  city    String
  zip     String
  country String
  email   String?
  phone   String?
  type    String
  default Boolean @default(false)

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @map("user_id")
  orders Order[]

  @@unique([title, userId])
  @@map("addresses")
}

model Cart {
  quantity Int

  id         String   @id @default(cuid())
  compoundId String   @map("compound_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String  @map("variant_id")

  @@unique([userId, compoundId])
  @@map("cart")
}

model PostCategory {
  title String

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  posts Post[]

  @@map("post_categories")
}

model ProductCategory {
  title String

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productParentCategory   ProductParentCategory? @relation(fields: [productParentCategoryId], references: [id], onDelete: Cascade)
  productParentCategoryId String?                @map("product_parent_category_id")
  products                Product[]

  @@map("product_categories")
}

model ProductParentCategory {
  title String

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productCategories ProductCategory[]

  @@map("product_parent_categories")
}

model Device {
  ip       String?
  city     String?
  region   String?
  country  String?
  loc      String?
  org      String?
  timezone String?
  os       String?

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  session   Session @relation(fields: [sessionId], references: [sessionToken], onDelete: Cascade)
  sessionId String  @unique @map("session_id")

  @@map("devices")
}

model Order {
  datePlaced           DateTime  @map("date_placed")
  status               String
  deliveryInstructions String?   @map("delivery_instructions")
  dateDelivered        DateTime? @map("date_delivered")

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String           @map("user_id")
  paymentMethod   PaymentMethod    @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String           @map("payment_method_id")
  purchase        Purchase?
  addresses       Address[]
  orderedProducts OrderedProduct[]

  @@map("orders")
}

model OrderedProduct {
  quantity Int

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId String?  @map("variant_id")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int      @map("order_id")

  @@unique([variantId, orderId])
  @@map("ordered_products")
}

model Otl {
  email String @unique
  otl   String

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @updatedAt @map("expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("otls")
}

model Otp {
  email String @unique
  otp   String

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @updatedAt @map("expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("otps")
}

model PaymentMethod {
  title   String
  name    String
  number  String?
  cvc     String?
  email   String?
  expiry  String?
  type    String
  default Boolean

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @map("user_id")
  orders Order[]

  @@unique([userId, title])
  @@map("payment_methods")
}

model Post {
  image       String
  title       String
  description String
  quoteText   String
  quoter      String
  date        String
  readingTime Int

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @map("user_id")
  category   PostCategory? @relation(fields: [categoryId], references: [id], onDelete: SetDefault)
  categoryId String?       @map("category_id")

  @@unique([userId, title])
  @@map("posts")
}

model Product {
  title        String
  desc         String
  code         String
  brand        String
  available    Boolean
  shippingDays Int     @map("shipping_days")
  sale         Boolean
  hot          Boolean

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  category   ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?          @map("category_id")
  variants   Variant[]
  reviews    Review[]
  cart       Cart[]
  Wishlist   Wishlist[]

  @@map("products")
}

model Profile {
  fname String? @map("first_name")
  lname String? @map("last_name")
  bio   String?

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("profiles")
}

model Purchase {
  date DateTime

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int   @unique @map("order_id")

  @@map("purchases")
}

model Review {
  date   DateTime
  rating Int
  title  String
  desc   String

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")

  @@unique([userId, productId])
  @@map("reviews")
}

model Store {
  image        String
  title        String
  goods        String
  distance     Int
  deliverable  Boolean
  deliveryTime String? @map("devlivery_time")

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("stores")
}

model User {
  image         String?
  name          String?
  position      String?
  password      String?
  email         String    @unique
  verified      Boolean   @default(false)
  emailVerified DateTime? @map("email_verified")
  role          Role      @default(USER)

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile        Profile?
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[] // Optional for WebAuthn support
  otps           Otp[]
  otls           Otl[]
  reviews        Review[]
  orders         Order[]
  cart           Cart[]
  wishlist       Wishlist[]
  addresses      Address[]
  posts          Post[]
  paymentMethods PaymentMethod[]

  @@map("users")
}

model Variant {
  image        String
  available    Boolean
  priceFormer  Int?    @map("price_former")
  pricePresent Int     @map("price_present")
  unitType     String  @map("unit_type")
  unitValue    String  @map("unit_value")

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String           @map("product_id")
  cart            Cart[]
  wishlist        Wishlist[]
  orderedProducts OrderedProduct[]

  @@map("variants")
}

model Wishlist {
  id         String   @id @default(cuid())
  compoundId String   @map("compound_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String  @map("variant_id")

  @@unique([userId, compoundId])
  @@map("wishlist")
}

// ===== nextauth models =====

model Account {
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @map("user_id")
  // end next auth config
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  // end next auth config
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
  device       Device?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String  @map("user_id")

  @@id([userId, credentialID])
  @@map("authenticators")
}
