// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name init -> sync database
// npx prisma db push -> sync database

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"] // enables postgresql extensions
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL") // uses connection pooling
  // directUrl = env("NEXT_DIRECT_URL") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?        @map("email_verified")
  image          String?
  accounts       Accounts[]
  sessions       Sessions[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  // end next auth config
  verified       Boolean          @default(false)
  password       String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  role           Role             @default(USER)
  otps           Otps[]
  otls           Otls[]
  profile        Profile?
  reviews        Reviews[]
  orders         Orders[]
  cart           Cart[]
  addresses      Addresses[]
  wishlist       Wishlist[]
  posts          Posts[]
  paymentMethods PaymentMethods[]

  @@map("users")
}

model Accounts {
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @map("user_id")
  // end next auth config
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Sessions {
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  // end next auth config
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
  devices      Devices?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model Devices {
  id        String   @id @default(cuid())
  ip        String?
  city      String?
  region    String?
  country   String?
  loc       String?
  org       String?
  timezone  String?
  os        String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  sessions  Sessions @relation(fields: [sessionId], references: [sessionToken], onDelete: Cascade)
  sessionId String   @unique @map("session_id")

  @@map("devices")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String  @map("user_id")

  @@id([userId, credentialID])
  @@map("authenticators")
}

// non-next-auth models

model Profile {
  id        String   @id @default(cuid())
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  bio       String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")

  @@map("profiles")
}

model Posts {
  id          String           @id @default(cuid())
  title       String
  description String
  published   Boolean          @default(false)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  user        User             @relation(fields: [userId], references: [id])
  userId      String           @map("user_id")
  categories  BlogCategories[]

  @@unique([userId, title])
  @@map("posts")
}

model BlogCategories {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  posts     Posts[]

  @@map("blog_categories")
}

model Otps {
  id        String   @id @default(cuid())
  email     String   @unique
  otp       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @updatedAt @map("expires_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")

  @@map("otps")
}

model Otls {
  id        String   @id @default(cuid())
  email     String   @unique
  otl       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @updatedAt @map("expires_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")

  @@map("otls")
}

model Products {
  id           String     @id @default(cuid())
  title        String
  desc         String
  category     String
  code         String
  brand        String
  available    Boolean
  shippingDays Int        @map("shipping_days")
  sale         Boolean
  hot          Boolean
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  variants     Variants[]
  reviews      Reviews[]
  cart         Cart[]
  wishlist     Wishlist[]

  @@map("products")
}

model ProductCategories {
  id         String                 @id @default(cuid())
  title      String
  createdAt  DateTime               @default(now()) @map("created_at")
  updatedAt  DateTime               @updatedAt @map("updated_at")
  categories ProductSubCategories[]

  @@map("product_categories")
}

model ProductSubCategories {
  id         String             @id @default(cuid())
  title      String
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")
  categories ProductCategories? @relation(fields: [categoryId], references: [id])
  categoryId String?            @map("category_id")

  @@map("product_sub_categories")
}

model Variants {
  id           String     @id @default(cuid())
  image        String
  available    Boolean
  priceFormer  Int?       @map("price_former")
  pricePresent Int        @map("price_present")
  unitType     String     @map("unit_type")
  unitValue    String     @map("unit_value")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  products     Products   @relation(fields: [productId], references: [id])
  productId    String     @map("product_id")
  cart         Cart[]
  wishlist     Wishlist[]

  @@map("variants")
}

model Reviews {
  id        String     @id @default(cuid())
  date      DateTime
  rating    Int
  title     String
  desc      String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  products  Products   @relation(fields: [productId], references: [id])
  productId String     @map("product_id")
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @map("user_id")
  purchases Purchases?

  @@unique([userId, productId])
  @@map("reviews")
}

model Orders {
  id            String      @id @default(cuid())
  datePlaced    DateTime    @map("date_placed")
  dateDelivered DateTime?   @map("date_delivered")
  subtotal      Int
  taxFee        Int         @map("tax_fee")
  serviceFee    Int         @map("service_fee")
  shippingFee   Int         @map("shipping_fee")
  status        String
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id")
  purchases     Purchases?
  cart          Cart[]
  addresses     Addresses[]

  @@map("orders")
}

model Addresses {
  id        String   @id @default(cuid())
  title     String
  fname     String
  lname     String
  street    String
  city      String
  zip       String
  state     String
  country   String
  email     String?
  phone     String?
  type      String
  default   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  orders    Orders   @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id")

  @@map("addresses")
}

model Purchases {
  id        String   @id @default(cuid())
  verified  Boolean  @default(false)
  date      DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Orders   @relation(fields: [orderId], references: [id])
  orderId   String   @unique @map("order_id")
  reviews   Reviews  @relation(fields: [reviewId], references: [id])
  reviewId  String   @unique @map("review_id")

  @@map("purchases")
}

model Cart {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  products  Products @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  variants  Variants @relation(fields: [variantId], references: [id])
  variantId String   @map("variant_id")
  orders    Orders   @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id")

  @@unique([userId, productId, variantId, orderId])
  @@map("cart")
}

model Wishlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  products  Products @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  variants  Variants @relation(fields: [variantId], references: [id])
  variantId String   @map("variant_id")

  @@unique([userId, productId, variantId])
  @@map("wishlist")
}

model Stores {
  id           String   @id @default(cuid())
  image        String
  title        String
  goods        String
  distance     Int
  deliverable  Boolean
  deliveryTime String?  @map("devlivery_time")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("stores")
}

model PaymentMethods {
  id        String   @id @default(cuid())
  title     String
  name      String
  number    String?
  cvc       String?
  email     String?
  expiry    String?
  type      String
  default   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@map("payment_methods")
}
